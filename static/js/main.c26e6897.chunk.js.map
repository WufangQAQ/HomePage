{"version":3,"sources":["component/mdDemo.jsx","component/SLGDemo.jsx","App.jsx","index.js"],"names":["require","Provider","Node","tex","String","raw","React","Component","SLGDemo","props","renderSLGDemo","self","canvas","document","getElementById","ctx","getContext","lattice","size","x","y","border","vx","vy","step","draw","console","log","this","fillStyle","fillRect","movableRange","i","upY","downY","leftX","rightX","movableRange2","addEventListener","event","state","key","width","height","clearRect","devicePixelRatio","window","vm","id","tabIndex","style","App","whiteSpace","ReactDOM","render"],"mappings":"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","file":"static/js/main.c26e6897.chunk.js","sourcesContent":["import React from 'react';\r\nimport { marked } from 'marked';\r\n// import MathJax from '@nteract/mathjax';\r\nconst { Provider, Node } = require('@nteract/mathjax');\r\n\r\n// const tex = String.raw(`f(x) = \\int_{-\\infty}^\\infty\r\n//     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n//     \\,d\\xi`);\r\nconst tex = String.raw`\\frac{actual}{min(x+y+z)}`;\r\n\r\nclass MdDemo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 400,\r\n      height: 360,\r\n      devicePixelRatio: window.devicePixelRatio || 1,\r\n    };\r\n\r\n    window.vm = this\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.renderMD();\r\n    this.renderCanvasDemo();\r\n  }\r\n\r\n  // renderMD = () => {\r\n  //   // const mdHtml = marked.parse('## title');\r\n  //   const mdHtml = marked.parse('test', {\r\n  //     baseUrl: '/assets/md/first-md.md',\r\n  //   });\r\n  //   // document.getElementById('content').innerHTML = mdHtml;\r\n  //   return mdHtml;\r\n  // };\r\n\r\n  renderCanvasDemo = () => {\r\n    const self = this;\r\n    const { width, height } = self.state;\r\n    const id = 'canvas-demo1';\r\n    let canvas = document.getElementById(id);\r\n    let ctx = canvas.getContext('2d');\r\n    let me = {\r\n      size: 20,\r\n      x: 20,\r\n      y: 36,\r\n      vx: 20,\r\n      vy: 18,\r\n      draw: function () {\r\n        ctx.font = '20px arial';\r\n        ctx.textAlign = 'start';\r\n        ctx.fillText('我', this.x, this.y); // 文字内容的左下角为文字的起点\r\n      },\r\n    };\r\n    me.draw();\r\n\r\n    const draw = (event) => {\r\n      let keyDown = event.key;\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      switch (keyDown) {\r\n        case 'ArrowUp':\r\n          // me.y - me.vy < 36 ? (me.y = 36) : (me.y = me.y - me.vy);\r\n          if (me.y - me.vy < 36) {\r\n            me.y = 36;\r\n            drawWall(0, 18, 20, 0, width / me.vx);\r\n          } else {\r\n            me.y = me.y - me.vy;\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          if (me.y - me.vy > 306) {\r\n            me.y = 342;\r\n            drawWall(0, 360, 20, 0, width / me.vx);\r\n          } else {\r\n            me.y = me.y + me.vy;\r\n          }\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (me.x - me.vx < 20) {\r\n            me.x = 20;\r\n            drawWall(0, 18, 0, 18, height / me.vy);\r\n          } else {\r\n            me.x = me.x - me.vx;\r\n          }\r\n          break;\r\n        case 'ArrowRight':\r\n          me.x - me.vx > 320 ? (me.x = 360) : (me.x = me.x + me.vx);\r\n          if (me.x - me.vx > 320) {\r\n            me.x = 360;\r\n            drawWall(380, 18, 0, 18, height / me.vy);\r\n          } else {\r\n            me.x = me.x + me.vx;\r\n          }\r\n          break;\r\n        default:\r\n          console.log(keyDown);\r\n          break;\r\n      }\r\n\r\n      me.draw();\r\n    };\r\n\r\n    const drawWall = (x, y, vx, vy, len) => {\r\n      ctx.font = '20px arial';\r\n      for (let i = 0; i < len; i++) {\r\n        ctx.fillText('墙', x + vx * i, y + vy * i);\r\n      }\r\n      ctx.fillText('哦对了，这里是一堵墙', 160, 180);\r\n    };\r\n\r\n    // 键盘事件只有能聚焦的元素才生效，否则会升级到父元素上面，所以再canvas上添加了tabIndex=\"0\"\r\n    canvas.addEventListener('keydown', (event) => {\r\n      draw(event);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { width, height, devicePixelRatio } = this.state;\r\n    let sWidth = width / devicePixelRatio;\r\n    let sHeight = height / devicePixelRatio;\r\n    return (\r\n      <div id=\"content\">\r\n        <Provider>\r\n          <p>\r\n            This is an inline math formula: <Node inline>{tex}</Node>\r\n            <span> and a block one:</span>\r\n            <Node>{`a = {x^2 - y^3}/3`}</Node>\r\n          </p>\r\n          <span style={{ fontSize: 16, fontFamily: 'arial' }}>我</span>\r\n        </Provider>\r\n        {/* 当分辨率有进行缩放的时候，在canvas中绘制的内容就会出现精度不够模糊的情况，所以要进行样式上的缩放来调整 */}\r\n        <canvas\r\n          id=\"canvas-demo1\"\r\n          tabIndex=\"0\"\r\n          width={width}\r\n          height={height}\r\n          style={{ width: sWidth, height: sHeight, border: '1px solid #666' }}\r\n        ></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MdDemo;\r\n","import React from 'react';\r\nimport { marked } from 'marked';\r\n// import MathJax from '@nteract/mathjax';\r\nconst { Provider, Node } = require('@nteract/mathjax');\r\n\r\n// const tex = String.raw(`f(x) = \\int_{-\\infty}^\\infty\r\n//     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n//     \\,d\\xi`);\r\nconst tex = String.raw`\\frac{actual}{min(x+y+z)}`;\r\n\r\nclass SLGDemo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 500,\r\n      height: 400,\r\n      devicePixelRatio: window.devicePixelRatio || 1,\r\n    };\r\n\r\n    window.vm = this;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.renderMD();\r\n    this.renderSLGDemo();\r\n  }\r\n\r\n  renderSLGDemo = () => {\r\n    const self = this;\r\n    // const { width, height } = self.state;\r\n    // init canvas\r\n    const id = 'SLG-canvas';\r\n    let canvas = document.getElementById(id);\r\n    let ctx = canvas.getContext('2d');\r\n    const lattice = {\r\n      size: 50,\r\n      x: 0,\r\n      y: 0,\r\n      border: 4,\r\n      vx: 50,\r\n      vy: 50,\r\n      step: 3,\r\n      draw: function () {\r\n        console.log('lattice', this);\r\n        ctx.fillStyle = 'aquamarine';\r\n        ctx.fillRect(this.x + this.border, this.y + this.border, this.size - this.border * 2, this.size - this.border * 2);\r\n      },\r\n      movableRange: function() {\r\n        // 按方向绘制\r\n        ctx.fillStyle = '#ccc';\r\n        for(let i=1 ;i<=this.step; i++) {\r\n          // 上\r\n          let upY = this.y - this.size*i\r\n          ctx.fillRect(this.x + this.border, upY + this.border, this.size - this.border * 2, this.size - this.border * 2);\r\n          // 下\r\n          let downY = this.y + this.size*i\r\n          ctx.fillRect(this.x + this.border, downY + this.border, this.size - this.border * 2, this.size - this.border * 2);\r\n          // 左\r\n          let leftX = this.x - this.size*i\r\n          ctx.fillRect(leftX + this.border, this.y + this.border, this.size - this.border * 2, this.size - this.border * 2);\r\n          // 右\r\n          let rightX = this.x + this.size*i\r\n          ctx.fillRect(rightX + this.border, this.y + this.border, this.size - this.border * 2, this.size - this.border * 2);\r\n        }\r\n      },\r\n      movableRange2: function () {\r\n        // 按圈数绘制\r\n        \r\n      }\r\n\r\n    };\r\n    lattice.draw();\r\n\r\n    // 绘制方块\r\n    const draw = (event) => {\r\n      const { width, height } = self.state;\r\n      const key = event.key;\r\n      // 清空画布重新绘制\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      switch (key) {\r\n        case 'ArrowUp':\r\n          lattice.y = lattice.y - lattice.vy >= 0 ? lattice.y - lattice.vy : lattice.y;\r\n          lattice.draw();\r\n          break;\r\n        case 'ArrowDown':\r\n          lattice.y = lattice.y + lattice.vy > canvas.height - lattice.size ? lattice.y : lattice.y + lattice.vy;\r\n          lattice.draw();\r\n          break;\r\n        case 'ArrowLeft':\r\n          lattice.x = lattice.x - lattice.vx >= 0 ? lattice.x - lattice.vx : lattice.x;\r\n          lattice.draw();\r\n          break;\r\n        case 'ArrowRight':\r\n          lattice.x = lattice.x + lattice.vx > canvas.width - lattice.size ? lattice.x : lattice.x + lattice.vx;\r\n          lattice.draw();\r\n          break;\r\n        case 'Enter':\r\n          lattice.draw();\r\n          lattice.movableRange();\r\n          break;\r\n        default:\r\n          console.log(key);\r\n          lattice.draw();\r\n          break;\r\n      }\r\n    }\r\n\r\n    \r\n    // 键盘事件只有能聚焦的元素才生效，否则会升级到父元素上面，所以再canvas上添加了tabIndex=\"0\"\r\n    canvas.addEventListener('keydown', (event) => {\r\n      draw(event);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { width, height, devicePixelRatio } = this.state;\r\n    let sWidth = width * devicePixelRatio;\r\n    let sHeight = height * devicePixelRatio;\r\n    return (\r\n      <div id=\"content\">\r\n        <canvas\r\n          id=\"SLG-canvas\"\r\n          width={width}\r\n          height={height}\r\n          tabIndex=\"0\"\r\n          style={{ width: width, height: height, border: '1px solid #666' }}\r\n        ></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SLGDemo;\r\n","import React from \"react\";\r\nimport MdDemo from \"./component/mdDemo\";\r\nimport SLGDemo from \"./component/SLGDemo\";\r\n// import { BrowserRouter, Route } from \"react-router-dom\";\r\nconst App = () => {\r\n  console.log('####    origin: https://github.com/wufang95/wufang95.github.io    ####')\r\n  return <div style={{whiteSpace: 'pre-line'}}>\r\n    {'CUSTOM WEBSET DEMO\\nFIRST CHANGE'}\r\n    {/* <MdDemo /> */}\r\n    <SLGDemo />\r\n  </div>;\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import \"./scss/custom.scss\";\r\nimport App from \"./App\";\r\n// import * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}